const express = require('express');
const jsonParser = require('body-parser').json();
const moment = require('moment');

const {
  getPlaylistTracks,
  createEmptyPlaylist,
  putPlaylistSongs,
} = require('../services/spotify/playlistService.js');
const { getUserProfile } = require('../services/spotify/userService.js');
const { refreshAccessToken } = require('../services/spotify/oauth2Service.js');
const { addPlaylistSubscription, getUser: getDbUser } = require('../services/dbService.js');
const {
  PLAYLIST_TYPE_TOP_SHORT_TERM,
  PLAYLIST_TYPE_TOP_MID_TERM,
  PLAYLIST_TYPE_TOP_LONG_TERM,
  PLAYLIST_TYPE_POPULAR,
  PLAYLIST_METADATA,
} = require('../constants.global.js');

const router = express.Router();

async function createPlaylist(refreshToken, playlistType, _playlistOpts) {
  const { result: accessToken } = await refreshAccessToken(refreshToken);
  const { result: userProfile } = await getUserProfile(accessToken);
  const userId = userProfile.id;
  console.log(`Generating playlist ${playlistType} for ${userId}`);
  const userOpts = {
    userId,
    accessToken,
  };
  const playlistOpts = _playlistOpts || {
    name: PLAYLIST_METADATA[playlistType].title,
    description: 'Generated by Songbird',
  };
  const [{ result: tracks }, { result: playlistId }] = await Promise.all([
    getPlaylistTracks(userOpts, playlistType),
    createEmptyPlaylist(userOpts, playlistOpts),
  ]);

  await putPlaylistSongs(userOpts, playlistId, tracks);
  return playlistId;
}

router.get('/playlist', async (req, res) => {
  const { refreshToken, playlistType } = req.query;
  if (![refreshToken, playlistType].every(e => !!e)) {
    return res
      .status(400)
      .json({ error: 'Bad request - missing query params!' });
  }
  const { result: accessToken } = await refreshAccessToken(refreshToken);

  const { result: userId } = await getUserProfile(accessToken);
  const userOpts = {
    userId,
    accessToken,
  };
  const { result } = await getPlaylistTracks(userOpts, playlistType);

  // Pluck tracks for response
  const tracks = result.map(track => ({
    name: track.name,
    album: track.album.name,
    artists: track.artists.map(artist => artist.name),
  }));
  return res.json({ tracks });
});

router.post('/playlist', jsonParser, async (req, res) => {
  const { playlistType, refreshToken } = req.body;
  if (![playlistType, refreshToken].every(e => e)) {
    res.sendStatus(400);
    return;
  }

  createPlaylist(refreshToken, playlistType, playlistOpts);
  res.sendStatus(200);
});

router.post('/playlist/subscribe', jsonParser, async (req, res) => {
  const { playlistType, refreshToken } = req.body;
  if (![playlistType, refreshToken].every(e => e)) {
    res.sendStatus(400);
    return;
  }

  const playlistOpts = {
    name: PLAYLIST_METADATA[playlistType].title,
    description: `Generated by Songbird | Last synced: ${moment().format('LL')}`,
  };
  const { result: dbUser } = await getDbUser(refreshToken);
  if (!dbUser) {
    console.warn(`Could not find user with token: `, refreshToken);
    res.sendStatus(400);
    return;
  }
  console.log('Inserting subscription for user: ', dbUser.spotify_username);
  const { result: playlistId } = createPlaylist(refreshToken, playlistType, playlistOpts);
  await addPlaylistSubscription(
    dbUser.id,
    playlistId,
    playlistType
  );
  if (err) {
    // TODO maybe delete playlist if error to avoid confusion
    console.error('Error adding subscription: ', { playlistId, refreshToken });
    console.error(err);
    res.sendStatus(400);
    return;
  }
  res.sendStatus(200);
});

module.exports = router;
