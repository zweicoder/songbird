const express = require('express');
const jsonParser = require('body-parser').json();
const moment = require('moment');

const {
  getPlaylistTracks,
  createEmptyPlaylist,
  putPlaylistSongs,
  userHasPlaylist,
} = require('spotify-service/playlistService');
const { getUserProfile } = require('spotify-service/userService');
const { refreshAccessToken } = require('../lib/oauthClient.js');
const {
  addPlaylistSubscription,
  getUserByToken: getDbUserByToken,
  getSubscription,
} = require('../services/dbService.js');
const { PLAYLIST_METADATA } = require('../constants.global.js');
const { wrapRoute } = require('../lib/utils.js');
const logger = require('../lib/logger.js')('routes/playlist.js');

const router = express.Router();

async function createPlaylist(refreshToken, playlistType, _playlistOpts) {
  const { result: accessToken } = await refreshAccessToken(refreshToken);
  const { result: userProfile } = await getUserProfile(accessToken);
  const userId = userProfile.id;

  logger.info(`Generating playlist ${playlistType} for ${userId}`);
  const playlistOpts = _playlistOpts || {
    name: PLAYLIST_METADATA[playlistType].title,
    description: 'Generated by Songbird',
  };
  const [{ result: tracks }, { result: playlistId }] = await Promise.all([
    getPlaylistTracks(accessToken, playlistType),
    createEmptyPlaylist(userId, accessToken, playlistOpts),
  ]);

  await putPlaylistSongs(userId, accessToken, playlistId, tracks);
  return { result: playlistId };
}

router.post(
  '/playlist',
  jsonParser,
  wrapRoute(async (req, res) => {
    const { playlistType, refreshToken } = req.body;
    if (![playlistType, refreshToken].every(e => e)) {
      logger.warn('Unable to create playlist due to missing arguments. Body: ', req.body);
      res.sendStatus(400);
      return;
    }

    await createPlaylist(refreshToken, playlistType);
    res.sendStatus(200);
  })
);

router.post(
  '/playlist/subscribe',
  jsonParser,
  wrapRoute(async (req, res) => {
    const { playlistType, refreshToken } = req.body;
    if (![playlistType, refreshToken].every(e => e)) {
      logger.warn('Missing param in request body!');
      res.sendStatus(400);
      return;
    }

    const playlistOpts = {
      name: PLAYLIST_METADATA[playlistType].title,
      description: `Generated by Songbird | Last synced: ${moment().format(
        'LL'
      )}`,
    };
    const { result: dbUser } = await getDbUserByToken(refreshToken);
    if (!dbUser) {
      logger.warn(`Could not find user with token: `, refreshToken);
      res.sendStatus(400);
      return;
    }

    const [
      { result: subscription },
      { result: accessToken },
    ] = await Promise.all([
      await getSubscription(dbUser.id, playlistType),
      await refreshAccessToken(refreshToken),
    ]);
    // Check if there is an existing subscription that is still valid (playlist not deleted)
    if (subscription) {
      const { result: hasPlayList } = await userHasPlaylist(
        accessToken,
        subscription.spotify_playlist_id
      );
      if (hasPlayList) {
        // Should be a mistake e.g. spamming button -  ignore request
        logger.info(
          'Found existing playlist with id: ',
          subscription.spotify_playlist_id
        );
        res.sendStatus(400);
        return;
      }
    }

    logger.info('Inserting subscription for user: %o', dbUser.spotify_username);
    const { result: playlistId } = await createPlaylist(
      refreshToken,
      playlistType,
      playlistOpts
    );
    await addPlaylistSubscription(dbUser.id, playlistId, playlistType);
    res.sendStatus(200);
  })
);

module.exports = router;
